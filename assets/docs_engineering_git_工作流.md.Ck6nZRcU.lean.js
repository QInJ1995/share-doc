import{_ as s,c as a,a2 as t,o as e}from"./chunks/framework.lYqQAyNq.js";const c=JSON.parse('{"title":"Git Flow","description":"","frontmatter":{},"headers":[],"relativePath":"docs/engineering/git/工作流.md","filePath":"docs/engineering/git/工作流.md"}'),l={name:"docs/engineering/git/工作流.md"};function h(n,i,p,d,o,r){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="git-flow" tabindex="-1">Git Flow <a class="header-anchor" href="#git-flow" aria-label="Permalink to &quot;Git Flow&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Git Flow 是一种 Git 工作流，它定义了一套清晰的分支管理规则，特别适合多人协作开发。Git Flow 主要通过特定的分支模型来管理功能开发、发布、修复等工作，帮助开发团队有序地进行版本管理。</p><p>Git Flow 工作流包括了以下几种分支类型：</p><ul><li><strong>master</strong>：主分支，保存着所有发布的版本。</li><li><strong>develop</strong>：开发分支，所有的功能开发都在该分支上进行，包含了所有即将发布的功能。</li><li><strong>feature</strong>：功能分支，用于开发新功能。</li><li><strong>release</strong>：发布分支，用于准备发布新的版本，解决发布前的 bug。</li><li><strong>hotfix</strong>：热修复分支，用于发布紧急的 bug 修复，直接基于 <code>master</code> 分支进行修复。</li></ul><h2 id="安装-git-flow" tabindex="-1">安装 Git Flow <a class="header-anchor" href="#安装-git-flow" aria-label="Permalink to &quot;安装 Git Flow&quot;">​</a></h2><h3 id="在-macos-上安装" tabindex="-1">在 macOS 上安装 <a class="header-anchor" href="#在-macos-上安装" aria-label="Permalink to &quot;在 macOS 上安装&quot;">​</a></h3><p>如果你使用的是 macOS 系统，可以通过 Homebrew 安装 Git Flow：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git-flow</span></span></code></pre></div><h3 id="在-linux-上安装" tabindex="-1">在 Linux 上安装 <a class="header-anchor" href="#在-linux-上安装" aria-label="Permalink to &quot;在 Linux 上安装&quot;">​</a></h3><p>对于 Linux 用户，Git Flow 通常可以通过包管理器安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git-flow</span></span></code></pre></div><h3 id="在-windows-上安装" tabindex="-1">在 Windows 上安装 <a class="header-anchor" href="#在-windows-上安装" aria-label="Permalink to &quot;在 Windows 上安装&quot;">​</a></h3><p>在 Windows 上安装 Git Flow，可以下载 Git Flow 的安装包，或者使用 <a href="https://git-scm.com/" target="_blank" rel="noreferrer">Git Bash</a> 中自带的 Git Flow。</p><h3 id="验证安装" tabindex="-1">验证安装 <a class="header-anchor" href="#验证安装" aria-label="Permalink to &quot;验证安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span></code></pre></div><h2 id="初始化-git-flow" tabindex="-1">初始化 Git Flow <a class="header-anchor" href="#初始化-git-flow" aria-label="Permalink to &quot;初始化 Git Flow&quot;">​</a></h2><p>在项目中初始化 Git Flow：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>运行该命令后，Git Flow 会要求你设置一些分支名称的规则，默认的分支名称规则如下：</p><ul><li><code>master</code>：用于发布的主分支。</li><li><code>develop</code>：用于开发的分支。</li></ul><p>当 Git Flow 初始化后，develop 分支和 master 分支将会被创建，并且你将能够基于它们创建其他类型的分支。</p><h2 id="git-flow-分支操作" tabindex="-1">Git Flow 分支操作 <a class="header-anchor" href="#git-flow-分支操作" aria-label="Permalink to &quot;Git Flow 分支操作&quot;">​</a></h2><h3 id="创建一个新功能分支" tabindex="-1">创建一个新功能分支 <a class="header-anchor" href="#创建一个新功能分支" aria-label="Permalink to &quot;创建一个新功能分支&quot;">​</a></h3><p>新功能通常基于 develop 分支创建。在 Git Flow 中，功能分支的命名通常遵循 feature/&lt;feature_name&gt; 的格式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">feature_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，如果你正在开发一个名为 login 的功能：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p>该命令会：</p><ul><li>创建一个新的 <code>feature/login</code> 分支。</li><li>自动切换到该分支上。</li></ul><p>你可以在该分支上进行开发，提交代码，直到功能开发完成。</p><h3 id="完成功能分支" tabindex="-1">完成功能分支 <a class="header-anchor" href="#完成功能分支" aria-label="Permalink to &quot;完成功能分支&quot;">​</a></h3><p>当功能开发完成时，可以将功能分支合并回 <code>develop</code> 分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">feature_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p>该命令会执行以下操作：</p><ul><li>将 <code>feature/login</code> 分支合并回 <code>develop</code>。</li><li>删除 <code>feature/login</code> 分支。</li></ul><h3 id="创建发布分支" tabindex="-1">创建发布分支 <a class="header-anchor" href="#创建发布分支" aria-label="Permalink to &quot;创建发布分支&quot;">​</a></h3><p>当 <code>develop</code> 分支上的功能完成并准备发布时，可以创建一个发布分支。发布分支的命名通常为 <code>release/&lt;version&gt;</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，如果当前版本是 <code>1.0.0</code>，可以执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0.0</span></span></code></pre></div><p>该命令会：</p><ul><li>基于 <code>develop</code> 分支创建一个新的 <code>release/1.0.0</code> 分支。</li><li>自动切换到 <code>release/1.0.0</code> 分支。</li></ul><p>你可以在发布分支上进行最后的 bug 修复，修改文档等工作，准备发布。</p><h3 id="完成发布分支" tabindex="-1">完成发布分支 <a class="header-anchor" href="#完成发布分支" aria-label="Permalink to &quot;完成发布分支&quot;">​</a></h3><p>当发布分支准备好后，可以将其合并回 <code>master</code> 和 <code>develop</code> 分支，并标记版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0.0</span></span></code></pre></div><p>该命令会：</p><ul><li>将 <code>release/1.0.0</code> 分支合并回 <code>master</code> 和 <code>develop</code>。</li><li>创建一个 Git 标签 <code>v1.0.0</code>。</li><li>删除 <code>release/1.0.0</code> 分支。</li></ul><h3 id="创建热修复分支" tabindex="-1">创建热修复分支 <a class="header-anchor" href="#创建热修复分支" aria-label="Permalink to &quot;创建热修复分支&quot;">​</a></h3><p>如果在生产环境中发现了紧急 bug，需要在 <code>master</code> 分支上快速修复，可以创建一个热修复分支。热修复分支的命名通常为 <code>hotfix/&lt;fix_name&gt;</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hotfix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fix_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，修复一个名为 <code>critical-bug</code> 的问题：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hotfix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> critical-bug</span></span></code></pre></div><p>该命令会：</p><ul><li>基于 <code>master</code> 分支创建一个新的 <code>hotfix/critical-bug</code> 分支。</li><li>自动切换到该分支。</li></ul><h3 id="完成热修复分支" tabindex="-1">完成热修复分支 <a class="header-anchor" href="#完成热修复分支" aria-label="Permalink to &quot;完成热修复分支&quot;">​</a></h3><p>当修复完成后，可以将热修复分支合并回 <code>master</code> 和 <code>develop</code> 分支，并标记版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hotfix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fix_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hotfix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> critical-bug</span></span></code></pre></div><p>该命令会：</p><ul><li>将 <code>hotfix/critical-bug</code> 分支合并回 <code>master</code> 和 <code>develop</code>。</li><li>创建一个 Git 标签。</li><li>删除 <code>hotfix/critical-bug</code> 分支。</li></ul><h2 id="常见-git-flow-命令总结" tabindex="-1">常见 Git Flow 命令总结 <a class="header-anchor" href="#常见-git-flow-命令总结" aria-label="Permalink to &quot;常见 Git Flow 命令总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>初始化 Git Flow</td><td>git flow init</td></tr><tr><td>开始功能分支</td><td><code>git flow feature start &lt;feature_name&gt;</code></td></tr><tr><td>完成功能分支</td><td><code>git flow feature finish &lt;feature_name&gt;</code></td></tr><tr><td>开始发布分支</td><td><code>git flow release start &lt;version&gt;</code></td></tr><tr><td>完成发布分支</td><td><code>git flow release finish &lt;version&gt;</code></td></tr><tr><td>开始热修复分支</td><td><code>git flow hotfix start &lt;fix_name&gt;</code></td></tr><tr><td>完成热修复分支</td><td><code>git flow hotfix finish &lt;fix_name&gt;</code></td></tr></tbody></table><h2 id="git-flow-与-github-flow-区别" tabindex="-1">Git Flow 与 GitHub Flow 区别 <a class="header-anchor" href="#git-flow-与-github-flow-区别" aria-label="Permalink to &quot;Git Flow 与 GitHub Flow 区别&quot;">​</a></h2><ul><li>Git Flow：适合大型团队和复杂项目，推荐用于有明确发布周期和多个开发阶段（如功能开发、发布、修复等）的项目。</li><li>GitHub Flow：适合轻量级开发，适用于快速迭代和持续集成。所有的更改都通过 pull request 完成，通常没有复杂的发布管理过程。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Git Flow 是一个强大且结构化的 Git 工作流，能够帮助团队高效地管理版本、功能开发和发布周期。它的分支模型清晰、易于理解，适用于中大型项目。</p><p>使用 Git Flow 时，需要注意以下几点：</p><ul><li>每个分支都有明确的目的和生命周期。</li><li>在团队协作时，保持 <code>develop</code> 分支和 <code>master</code> 分支的稳定性。</li><li>使用 Git Flow 时，通常需要定期进行合并操作，以确保各分支之间的同步。</li></ul>',75)]))}const g=s(l,[["render",h]]);export{c as __pageData,g as default};
