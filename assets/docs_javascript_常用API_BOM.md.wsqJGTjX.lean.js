import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.lYqQAyNq.js";const E=JSON.parse('{"title":"BOM","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/常用API/BOM.md","filePath":"docs/javascript/常用API/BOM.md"}'),n={name:"docs/javascript/常用API/BOM.md"};function l(r,s,h,p,d,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h1><p>BOM（Browser Object Model，浏览器对象模型）提供了与浏览器窗口和页面交互的方法和接口。它允许开发者访问和操纵浏览器窗口、地址栏、导航历史、屏幕信息等。</p><p>BOM 的核心对象是 window，几乎所有 BOM 的接口和方法都可以通过 window 对象访问</p><h2 id="窗口对象-window" tabindex="-1">窗口对象（Window） <a class="header-anchor" href="#窗口对象-window" aria-label="Permalink to &quot;窗口对象（Window）&quot;">​</a></h2><p>window 是 BOM 的核心对象。所有全局对象、函数和变量都是 window 对象的属性或方法。</p><p>常用属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth" target="_blank" rel="noreferrer">window.innerWidth</a></td><td>返回窗口的内部宽度（视口宽度）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerHeight" target="_blank" rel="noreferrer">window.innerHeight</a></td><td>返回窗口的内部高度（视口高度）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/outerWidth" target="_blank" rel="noreferrer">window.outerWidth</a></td><td>返回窗口的外部宽度（包括浏览器边框和工具栏）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/outerHeight" target="_blank" rel="noreferrer">window.outerHeight</a></td><td>返回窗口的外部高度（包括浏览器边框和工具栏）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/screen" target="_blank" rel="noreferrer">window.screen</a></td><td>返回一个 Screen 对象，提供有关用户屏幕的信息。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/screenX" target="_blank" rel="noreferrer">window.screenX</a></td><td>返回窗口左上角相对于屏幕左侧的 X 坐标。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/screenY" target="_blank" rel="noreferrer">window.screenY</a></td><td>返回窗口左上角相对于屏幕顶部的 Y 坐标。</td></tr></tbody></table><p>常用方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/alert" target="_blank" rel="noreferrer">window.alert()</a></td><td>显示一个警告框。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/confirm" target="_blank" rel="noreferrer">window.confirm()</a></td><td>window.confirm()</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/prompt" target="_blank" rel="noreferrer">window.prompt()</a></td><td>显示一个提示框，返回用户输入的值。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open" target="_blank" rel="noreferrer">window.open()</a></td><td>打开一个新的浏览器窗口或标签页。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/close" target="_blank" rel="noreferrer">window.close()</a></td><td>关闭当前窗口或标签页（通常需要用户触发）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo" target="_blank" rel="noreferrer">window.scrollTo()</a></td><td>滚动窗口到指定的坐标位置。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollBy" target="_blank" rel="noreferrer">window.scrollBy()</a></td><td>相对于当前位置滚动窗口。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取窗口的宽高</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.innerWidth);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 视口宽度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.innerHeight); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 视口高度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 弹出警告框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个警告框！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打开新窗口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 滚动到页面顶部</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="导航对象-navigator" tabindex="-1">导航对象（Navigator） <a class="header-anchor" href="#导航对象-navigator" aria-label="Permalink to &quot;导航对象（Navigator）&quot;">​</a></h2><p>navigator 对象包含浏览器的信息，比如用户代理、在线状态等。</p><p>常用属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/userAgent" target="_blank" rel="noreferrer">navigator.userAgent</a></td><td>返回浏览器的用户代理字符串。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/platform" target="_blank" rel="noreferrer">navigator.platform</a></td><td>返回浏览器运行的操作系统平台。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/language" target="_blank" rel="noreferrer">navigator.language</a></td><td>返回当前浏览器的语言设置（如 en-US）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/onLine" target="_blank" rel="noreferrer">navigator.onLine</a></td><td>返回布尔值，表示浏览器是否处于在线状态。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.userAgent);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查是否在线</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (navigator.onLine) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前在线&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前离线&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="屏幕对象-screen" tabindex="-1">屏幕对象（Screen） <a class="header-anchor" href="#屏幕对象-screen" aria-label="Permalink to &quot;屏幕对象（Screen）&quot;">​</a></h2><p>screen 对象提供有关用户屏幕的信息。</p><p>常用属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen/width" target="_blank" rel="noreferrer">screen.width</a></td><td>可用的屏幕高度（排除任务栏等）。屏幕的宽度（以像素为单位）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen/height" target="_blank" rel="noreferrer">screen.height</a></td><td>可用的屏幕高度（排除任务栏等）。屏幕的高度（以像素为单位）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen/availWidth" target="_blank" rel="noreferrer">screen.availWidth</a></td><td>可用的屏幕高度（排除任务栏等）。宽度（排除任务栏等）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen/availHeight" target="_blank" rel="noreferrer">screen.availHeight</a></td><td>可用的屏幕高度（排除任务栏等）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen/colorDepth" target="_blank" rel="noreferrer">screen.colorDepth</a></td><td>可用的屏幕高度（排除任务栏等）。返回屏幕的颜色深度（如 24 位）。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取屏幕宽高</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`屏幕宽度: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">screen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`屏幕高度: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">screen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">height</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="历史对象-history" tabindex="-1">历史对象（History） <a class="header-anchor" href="#历史对象-history" aria-label="Permalink to &quot;历史对象（History）&quot;">​</a></h2><p>history 对象允许操作浏览器的历史记录。</p><p>常用方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/back" target="_blank" rel="noreferrer">history.back()</a></td><td>加载历史记录中的前一个页面。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/forward" target="_blank" rel="noreferrer">history.forward()</a></td><td>加载历史记录中的下一个页面。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/go" target="_blank" rel="noreferrer">history.go(n)</a></td><td>加载历史记录中的指定页面（相对位置）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/pushState" target="_blank" rel="noreferrer">history.pushState(state, title, url)</a></td><td>向历史记录中添加一个新的状态。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/replaceState" target="_blank" rel="noreferrer">history.replaceState(state, title, url)</a></td><td>替换当前的历史记录状态。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回上一页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前进到下一页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳转到历史中的第 n 个页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后退两页</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加新状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;?page=1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换当前状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;?page=2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="位置对象-location" tabindex="-1">位置对象（Location） <a class="header-anchor" href="#位置对象-location" aria-label="Permalink to &quot;位置对象（Location）&quot;">​</a></h2><p>location 对象表示当前页面的 URL 信息，并允许操作 URL。</p><p>常用属性</p><table tabindex="0"><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/href" target="_blank" rel="noreferrer">location.href</a></td><td>返回或设置完整的 URL。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/protocol" target="_blank" rel="noreferrer">location.protocol</a></td><td>返回 URL 的协议（如 http:、https:）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/host" target="_blank" rel="noreferrer">location.host</a></td><td>返回主机名和端口（如 example.com:80）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/pathname" target="_blank" rel="noreferrer">location.pathname</a></td><td>返回路径部分（如 /path/page.html）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/search" target="_blank" rel="noreferrer">location.search</a>:</td><td>返回查询字符串（如 ?id=123）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hash" target="_blank" rel="noreferrer">location.hash</a></td><td>返回 URL 的片段标识符（如 #section1）。</td></tr></tbody></table><p>常用方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/reload" target="_blank" rel="noreferrer">location.reload()</a></td><td>重新加载当前页面。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/assign" target="_blank" rel="noreferrer">location.assign(url)</a></td><td>加载新的页面。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/replace" target="_blank" rel="noreferrer">location.replace(url)</a></td><td>加载新的页面，并替换当前页面（不会记录到历史中）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/toString" target="_blank" rel="noreferrer">location.toString()</a></td><td>返回完整的 URL 字符串。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前 URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location.href);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳转到新页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新加载页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="计时器-timers" tabindex="-1">计时器（Timers） <a class="header-anchor" href="#计时器-timers" aria-label="Permalink to &quot;计时器（Timers）&quot;">​</a></h2><p>BOM 提供了计时器方法用于延迟执行代码或定时执行。</p><p>常用方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout" target="_blank" rel="noreferrer">setTimeout(func, delay)</a></td><td>在指定的延迟后执行一次函数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval" target="_blank" rel="noreferrer">setInterval(func, delay)</a></td><td>每隔指定的延迟执行一次函数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearTimeout" target="_blank" rel="noreferrer">clearTimeout(timeoutId)</a></td><td>取消由 setTimeout 设置的定时器。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval" target="_blank" rel="noreferrer">clearInterval(intervalId)</a></td><td>取消由 setInterval 设置的定时器。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 延迟 2 秒打印消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeoutId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2 秒后执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除延迟</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeoutId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每隔 1 秒打印消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> intervalId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;每隔 1 秒执行一次&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除定时器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intervalId);</span></span></code></pre></div><h2 id="对话框-dialogs" tabindex="-1">对话框（Dialogs） <a class="header-anchor" href="#对话框-dialogs" aria-label="Permalink to &quot;对话框（Dialogs）&quot;">​</a></h2><p>BOM 提供了几种常见的对话框方法。</p><p>常用方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/alert" target="_blank" rel="noreferrer">alert(message)</a></td><td>显示一个带有消息和确定按钮的警告框。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/confirm" target="_blank" rel="noreferrer">confirm(message)</a></td><td>显示一个带有消息、确定和取消按钮的对话框，并返回用户选择的布尔值。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/prompt" target="_blank" rel="noreferrer">prompt(message, defaultValue)</a></td><td>显示一个带有消息、输入框和确定取消按钮的对话框，并返回用户输入的字符串。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 警告框</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个警告框！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确认框</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isConfirmed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你确定要继续吗？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isConfirmed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;用户点击了确定&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;用户点击了取消&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提示框</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入你的名字：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;默认值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`用户输入：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userInput</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="事件监听-event-listeners" tabindex="-1">事件监听（Event Listeners） <a class="header-anchor" href="#事件监听-event-listeners" aria-label="Permalink to &quot;事件监听（Event Listeners）&quot;">​</a></h2><p>BOM 提供了事件监听功能，用于监听窗口的各种事件。</p><p>常用事件</p><table tabindex="0"><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/load_event" target="_blank" rel="noreferrer">load</a></td><td>页面加载完成时触发。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resize_event" target="_blank" rel="noreferrer">resize</a></td><td>窗口大小改变时触发。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/beforeunload_event" target="_blank" rel="noreferrer">beforeunload</a></td><td>页面卸载前触发。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/online_event" target="_blank" rel="noreferrer">online</a></td><td>页面卸载前触发。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/offline_event" target="_blank" rel="noreferrer">offline</a></td><td>页面卸载前触发。</td></tr></tbody></table><p>示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听窗口大小变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;窗口大小改变了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听页面卸载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeunload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 某些浏览器需要设置这个值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,55)]))}const g=i(n,[["render",l]]);export{E as __pageData,g as default};
