import{_ as e,c as s,a2 as a,o as i}from"./chunks/framework.lYqQAyNq.js";const g=JSON.parse('{"title":"XMLHttpRequest","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/常用API/XMLHttpRequest.md","filePath":"docs/javascript/常用API/XMLHttpRequest.md"}'),r={name:"docs/javascript/常用API/XMLHttpRequest.md"};function h(l,t,d,n,p,o){return i(),s("div",null,t[0]||(t[0]=[a(`<h1 id="xmlhttprequest" tabindex="-1">XMLHttpRequest <a class="header-anchor" href="#xmlhttprequest" aria-label="Permalink to &quot;XMLHttpRequest&quot;">​</a></h1><h2 id="xmlhttprequest-对象" tabindex="-1">XMLHttpRequest 对象 <a class="header-anchor" href="#xmlhttprequest-对象" aria-label="Permalink to &quot;XMLHttpRequest 对象&quot;">​</a></h2><p>XMLHttpRequest 对象用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h3 id="创建-xmlhttprequest-对象" tabindex="-1">创建 XMLHttpRequest 对象 <a class="header-anchor" href="#创建-xmlhttprequest-对象" aria-label="Permalink to &quot;创建 XMLHttpRequest 对象&quot;">​</a></h3><p>XMLHttpRequest 对象用于与服务器交换数据。您可以通过 XMLHttpRequest 对象向服务器发送请求，并获取服务器响应，而不重新加载页面。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="向服务器发送请求" tabindex="-1">向服务器发送请求 <a class="header-anchor" href="#向服务器发送请求" aria-label="Permalink to &quot;向服务器发送请求&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method, url, async, user, password);</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>method</td><td>必需。请求的类型；GET 或 POST</td></tr><tr><td>url</td><td>必需。服务器上的文件位置</td></tr><tr><td>async</td><td>可选。true（异步）或 false（同步）</td></tr><tr><td>user</td><td>可选。用于认证的用户名</td></tr><tr><td>password</td><td>可选。用于认证的密码</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo_get.asp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="发送请求" tabindex="-1">发送请求 <a class="header-anchor" href="#发送请求" aria-label="Permalink to &quot;发送请求&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="请求状态" tabindex="-1">请求状态 <a class="header-anchor" href="#请求状态" aria-label="Permalink to &quot;请求状态&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>请求未初始化（请求还未发送）</td></tr><tr><td>1</td><td>服务器连接已建立（正在发送请求）</td></tr><tr><td>2</td><td>请求已接收（正在处理请求）</td></tr><tr><td>3</td><td>请求处理中（通常现在可以从响应中获取部分数据）</td></tr><tr><td>4</td><td>请求已完成，且响应已就绪（响应已接收完毕）</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onreadystatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.responseText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="xmlhttprequest-对象属性" tabindex="-1">XMLHttpRequest 对象属性 <a class="header-anchor" href="#xmlhttprequest-对象属性" aria-label="Permalink to &quot;XMLHttpRequest 对象属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readystatechange_event" target="_blank" rel="noreferrer">onreadystatechange</a></td><td>定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState" target="_blank" rel="noreferrer">readyState</a></td><td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/response" target="_blank" rel="noreferrer">response</a></td><td>返回一个 ArrayBuffer、Blob、Document，或 DOMString，具体是哪种类型取决于 XMLHttpRequest.responseType 的值。其中包含整个响应实体（response entity body）</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType" target="_blank" rel="noreferrer">responseType</a></td><td>一个用于定义响应类型的枚举值（enumerated value）</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseText" target="_blank" rel="noreferrer">responseText</a></td><td>以字符串返回响应数据</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseXML" target="_blank" rel="noreferrer">responseXML</a></td><td>以 XML 数据返回响应数据</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseURL" target="_blank" rel="noreferrer">responseURL</a></td><td>返回经过序列化（serialized）的响应 URL，如果该 URL 为空，则返回空字符串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/status" target="_blank" rel="noreferrer">status</a></td><td>200: &quot;OK&quot; 404: 未找到页面</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/statusText" target="_blank" rel="noreferrer">statusText</a></td><td>返回状态文本（比如 &quot;OK&quot; 或 &quot;Not Found&quot;）</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/timeout" target="_blank" rel="noreferrer">timeout</a></td><td>设置一个可选的异步请求超时时间（以毫秒为单位）</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload" target="_blank" rel="noreferrer">upload</a></td><td>允许访问与请求关联的 XMLHttpRequestUpload 对象，使用它来跟踪请求的进度</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials" target="_blank" rel="noreferrer">withCredentials</a></td><td>指示是否该使用类似 cookies、authorization headers（头部授权）或 TLS 客户端证书等身份验证来访问资源</td></tr></tbody></table><h3 id="xmlhttprequest-对象方法" tabindex="-1">XMLHttpRequest 对象方法 <a class="header-anchor" href="#xmlhttprequest-对象方法" aria-label="Permalink to &quot;XMLHttpRequest 对象方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/abort" target="_blank" rel="noreferrer">abort()</a></td><td>取消当前请求</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noreferrer">getAllResponseHeaders()</a></td><td>返回头部信息</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader" target="_blank" rel="noreferrer">getResponseHeader()</a></td><td>返回特定的头部信息</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open" target="_blank" rel="noreferrer">open()</a></td><td>规定请求的类型、URL 以及是否异步处理请求</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/overrideMimeType" target="_blank" rel="noreferrer">overrideMimeType()</a></td><td>强制指定 MIME 类型</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" target="_blank" rel="noreferrer">send()</a></td><td>发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader" target="_blank" rel="noreferrer">setRequestHeader()</a></td><td>向请求添加 HTTP 头</td></tr></tbody></table><h3 id="xmlhttprequest-对象事件" tabindex="-1">XMLHttpRequest 对象事件 <a class="header-anchor" href="#xmlhttprequest-对象事件" aria-label="Permalink to &quot;XMLHttpRequest 对象事件&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/abort_event" target="_blank" rel="noreferrer">abort</a></td><td>当请求操作被中止时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/error_event" target="_blank" rel="noreferrer">error</a></td><td>当请求遇到错误时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/load_event" target="_blank" rel="noreferrer">load</a></td><td>当请求成功完成时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/loadend_event" target="_blank" rel="noreferrer">loadend</a></td><td>当请求完成时触发，无论成功或失败</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/loadstart_event" target="_blank" rel="noreferrer">loadstart</a></td><td>当请求开始时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/progress_event" target="_blank" rel="noreferrer">progress</a></td><td>当请求接收到数据时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/timeout_event" target="_blank" rel="noreferrer">timeout</a></td><td>当请求超时时触发</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readystatechange_event" target="_blank" rel="noreferrer">readystatechange</a></td><td>当 <code>readyState</code> 属性发生变化时触发</td></tr></tbody></table><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><h3 id="ajax" tabindex="-1">ajax <a class="header-anchor" href="#ajax" aria-label="Permalink to &quot;ajax&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.github.com/users/github&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onreadystatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.responseText);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,24)]))}const E=e(r,[["render",h]]);export{g as __pageData,E as default};
